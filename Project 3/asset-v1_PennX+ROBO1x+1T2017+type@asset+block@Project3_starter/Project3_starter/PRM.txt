function roadmap = PRM (RandomSample, Dist, LocalPlanner, nsamples, k)

%The input arguments to this function are explained below:
 %   RandomSample: a function which returns a random sample in freespace.
 %   Dist: a function which can be used to compute the distance between 
 %   a given random sample and all of the samples generated so far
 %   LocalPlanner: a function that can be used to test whether two configuration space points,
 %   x1 and x2, can be joined by a straight line. That is LocalPlanner
 %   (x1, x2) will only return true if the straight line between x1 and x2 does not
 %   intersect any configuration space obstacles.
 %   nsamples: the total number of random samples to be generated
 %   k: number of neighboring samples to be considered during PRM construction
%   The section of code that you are asked to complete should perform the following steps:
%   Use the array distances generated by Dist function to determine the indices of the k
%   nearest neighbors. (Hint: you may find the sort function useful here.)
%   For each of those neighbors, it should determine whether or not it can forge a path
%   between those two locations using the LocalPlanner function.
%   If a path exists, it should then update the set of edges as follow:
%   Add an entry to edges array indicating the indices of the two samples that
%   have just been joined.
%   Add a corresponding entry to the edge lengths array indicating the length of
%   this new edge.
%   Increment the nedges variable to reflect the fact that a new node has been added.
%   These edges and edge lengths constitute a graph which will be used later by the
%   ShortestPathDijkstra routine to plan paths through the roadmap. Once you are
%   done you can test your code by running the SixLinkPRMScript script which
%   uses the PRM function to construct a roadmap and then attempts to add edges to
%   the start and goal location and plan paths through the graph using Dijkstra's algorithm.
%   If it succeeds in planning a route it shows an animation of the resulting motion.
%   Note that because of the stochastic nature of this procedure the scheme may sometimes
%   fail to find a path even when one exists. You can experiment with the number of samples,
%   and the number of neighbors as well as the layout of the obstacles.


% PRM - ProbablisticRoadMap : This procedure computes a probabilistic road
% map of configuration space. It relies on 3 functions
% RandomSample which generates the coordinate vector for a random sample in
% free space. Dist which measures the distance between two
% coordinate vectors and LocalPlanner which decides whether two samples are
% connected.
%
% Inputs :
%
%   RandomSample : A function that returns a random sample in freespace
%
%   Dist : A function that computes the distance between a given point in
%        configuration space and all of the entries in an array of samples
%
%   LocalPlanner :  A function that determines whether there is a collision
%        free straight line path between two points in configuration space
%
%   nsamples : The number of random samples to generate
%
%   k : The number of neighbors that should be considered in
%        forming the roadmap graph.
%
% Output :
%   roadmap - a structure the samples, the edges and edge lengths in the
%        roadmap graph

x = RandomSample();

% Array of random samples, each column corresponds to the coordinates
% of a point in configuration space.
samples = repmat(x(:), 1, nsamples);

% edges - an array with 2 rows each column has two integer entries
% (i, j) which encodes the fact that sample i and sample j are connected
% by an edge. For each 
edges = zeros(nsamples*k, 2);
edge_lengths = zeros(nsamples*k, 1);

% nedges - this integer keeps track of the number of edges we
% have in the graph so far
nedges = 0;

for i = 2:nsamples
    % Note that we are assuming that RandomSample returns a sample in
    % freespace
    x = RandomSample();

    samples(:,i) = x(:);
    
    % Find the nearest neighbors
    
    % Here we assume that the Dist function can compute the
    % distance to multiple samples corresponding to the columns of
    % the second argument
    % at the end of this call the array distances will indicate the
    % distance between the new sample and each of the samples that has been
    % generated so far in the program.
    distances = Dist(x, samples(:,1:(i-1)));
    
    %%% YOUR CODE HERE
    %
    % Find the closest k samples, use the LocalPlanner function to see if
    % you can forge an edge to any of these samples and update the edges,
    % edge_lengths and nedges variables accordingly.
    % ******************************************************************
    
    length_n = length(distances);
    [sorted_distances, index_distances] = sort(distances);
    for ii = 1: min(k, length_n)
        j = index_distances(ii);
        if (LocalPlanner(x, samples(:,j)))
            nedges = nedges + 1;
            edges(nedges,:) = [length_n+1, j];
            edge_lengths(nedges) = sorted_distances(ii);
        end
    end
    
    % ******************************************************************
    fprintf (1, 'nsamples = %d, nedges = %d\n', i, nedges);
   
end

roadmap.samples = samples;
roadmap.edges = edges(1:nedges, :);
roadmap.edge_lengths = edge_lengths(1:nedges);